// Code generated for package data by go-bindata DO NOT EDIT. (@generated)
// sources:
// ../../example/config.toml
// ../../example/includes/base.html
// ../../example/includes/page.html
// ../../example/includes/pagination.html
// ../../example/includes/post.html
// ../../example/pages/404.html
// ../../example/pages/about.md
// ../../example/pages/index.html
// ../../example/posts/first-post.md
// ../../example/posts/fourth-post.md
// ../../example/posts/second-post.md
// ../../example/posts/third-post.md
// ../../example/public/favicon.ico
// ../../example/public/styles.css
package data

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _ExampleConfigToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x55\x41\x8b\xdc\x48\x0f\xbd\xf7\xaf\x10\xfe\x0e\x1f\x04\xc7\x09\x84\xbd\x04\xfa\x1a\x76\x60\xb3\x1b\x36\xb3\xec\x61\xc8\xa1\x6c\xcb\x6d\x25\xe5\x92\xa9\x92\xc7\xd3\x90\x1f\xbf\x48\x55\x76\xbb\x49\x6e\xbb\x97\xc1\xd3\x55\xf5\xf4\xf4\x24\x3d\x3d\x25\x12\xfc\x72\x02\xf8\x1f\x3c\x8e\x08\x3d\x0e\x6e\xf1\x02\x42\xe2\x11\x78\x00\x19\x11\xf4\x4a\x03\x7f\x04\x98\x39\x49\x02\x8e\x30\xbb\x0b\x26\x58\x49\x46\x70\x50\xd9\xe5\xca\x30\x06\x42\xdf\xd7\xf6\x2a\x43\x50\x82\x81\xe3\x84\x3d\xb4\x57\xf8\xca\x14\x28\x5c\xec\xf8\x3e\x92\x42\x19\x80\x83\xea\x7b\x05\x2e\xf4\x76\x49\xe3\xe4\x1b\x0d\x7c\xe0\x08\xf8\xe2\xa6\xd9\xe3\x7b\xa8\x3e\x5e\x8d\x16\x7c\x87\x8f\x57\xe3\xa5\xf1\x33\xd6\x79\x3f\xad\x0e\x79\xa5\x2e\xd2\x2c\xc4\xe1\x98\x55\x0d\x4b\xc2\x1e\x28\xec\xbf\xfc\x3f\x1d\xef\xda\xfb\x09\xc5\x81\xb8\x4b\x73\x82\x3b\x9c\x33\x54\xbf\x62\xb4\x14\xa7\x2b\xac\x1c\x7a\x8c\xc3\xe2\x61\xc5\xd6\x14\xbb\x45\x6f\x5d\x42\x58\xa2\xbf\x17\xf4\x71\xa4\xa4\x8f\x8d\xc2\x3a\x62\x80\x0b\x06\x8c\x4e\x36\x89\x32\x1f\x43\xf9\xf3\xf3\x67\x18\x10\xfb\x1a\x68\x00\x0c\xae\xf5\xd8\x2b\x1f\x05\x3d\x43\x35\x8a\xcc\xef\xdf\xbc\xf1\xdc\x39\x3f\x72\x92\xf7\xef\xde\xbe\x7d\x5b\x9d\x4e\x4f\x3d\x45\xec\x84\x23\x61\xba\x15\x59\x70\x9a\xbd\x13\x4c\xb0\x1d\x5f\xa1\xe3\x20\x8e\x42\x3a\x1c\x6a\x11\x66\x17\x85\x9c\x4f\x0d\xfc\x15\x3c\x7d\x43\xc3\xb0\xea\x5b\x91\xaf\xe0\x22\x42\x60\x81\x8e\xa7\x99\x3c\xf6\xc0\xa6\x25\x45\xe0\x35\x34\xf0\x10\x80\x65\xc4\x08\x2b\xc7\x3e\xd5\xf6\x9c\x06\x6b\x9a\x2d\xce\x1b\x0a\x3d\xbe\x34\xa3\x4c\xbe\x82\x81\x3c\x02\xbe\x50\x92\x54\x43\xbb\x88\x61\xdb\x8f\x14\xa0\xb2\xc0\x59\xd6\x88\x03\xc6\x04\xc2\x40\x62\x54\x02\x90\xc0\x4a\xde\xdb\x93\x56\x1f\x74\x7e\xe9\x7f\xa8\x6e\xbb\x90\x17\x83\xe0\x45\xe6\x45\x8c\xa3\x66\x1f\x5d\x92\xba\xc4\xb8\xe3\x64\xa0\x07\x40\xd5\xbd\x7c\x27\x15\x7f\xfb\xbe\xd5\x3b\x8f\xc7\x4f\xc4\xcd\x07\x32\x3a\x81\xce\x85\x0c\x0a\x93\x8b\xdf\x7a\x5e\x03\x70\x34\x04\x8d\x6a\x43\xe3\xa4\x81\x4f\xf6\x42\x2f\x3b\x9f\x58\x7b\x65\xaf\x50\x09\x40\xcf\xa5\x56\x5a\x8f\x3c\x43\x11\x6f\xf5\x10\x3e\x66\x5f\x72\x3e\x41\xa1\x72\xbe\x13\xd5\xb8\xdb\x8c\xff\x84\xfb\x4e\xb3\xf5\x7c\xc9\xd7\x1a\x78\x10\xed\x5f\x9d\x52\xca\x8d\xca\x36\x1b\xce\x5b\x08\x83\xd2\x10\xfa\x91\x43\x7c\x20\x5f\xe8\xa6\xa5\x7d\x7d\x68\xcf\x5c\x26\x3a\x86\xd6\x3c\x26\x7e\xbe\x25\x11\x99\x05\x78\x30\x20\xfd\x3f\x67\x73\x7b\xd1\x14\x78\x13\x18\x43\x9f\x1d\xca\xca\x58\x43\xd3\xa5\x54\x43\xf3\x35\xff\x79\xc9\xbd\xd8\xa4\xe7\x4b\x0d\xcd\x8b\x5e\xe0\xa8\x07\x1c\x2c\xae\x5b\x84\x27\x27\xd4\x39\xef\xaf\x30\x51\xa0\x81\x72\xe9\xe7\xa5\xf5\xd4\x59\x5a\xf6\x75\x30\x99\x9d\x39\x05\x61\x58\x47\xea\xc6\xdc\x6f\xe0\x52\x42\x49\x86\x3c\x7b\xd7\x65\xa4\x42\xff\x0c\x95\x5e\xea\x6d\x5e\xb3\x2b\xee\xc3\x4a\xb7\x81\xdc\xad\x42\x18\xe6\xc8\x1d\x26\xd5\xf1\x7a\xab\xcb\x36\x26\x9b\x71\xe6\x82\x1c\xc4\x79\x10\x48\x23\x2f\xbe\xd7\xc6\x53\xaf\x90\xdb\x74\xfc\xc4\x13\xb6\x2e\x79\xdc\x08\x94\x66\xc9\x63\xf1\x6f\x09\x6a\x4b\xfc\x17\x04\x39\xc9\x1d\x41\x4e\x52\x08\x9e\x9e\x4c\xd6\x2c\xa5\xc5\x7b\xd0\xa9\x56\x9a\xae\x6c\x16\xed\x93\x03\xeb\xe2\xbf\x68\x01\xcd\x02\xb6\x6e\xdb\xdb\xfd\x40\xb0\x10\x7b\x65\x5a\xbf\xba\xd1\xaa\xb7\x3b\xc5\x18\x20\x2d\xf3\xcc\x31\x9b\xce\x90\xb7\x27\x05\xa7\x73\x52\xe7\x49\x28\xd7\x65\x0b\x1e\x79\xb9\x8c\xe0\xbc\x07\xf7\xec\xc8\xab\xdb\x17\x06\xdb\x54\x59\x26\xea\x0d\xd9\x80\x76\xb3\xda\xce\x3f\x61\x2c\xa7\xef\x60\xef\xcf\x81\xbd\xe7\xd5\xb6\xcb\xca\x47\xf7\x30\xfb\x63\x6f\xe9\xb4\x38\xba\x67\xe2\xa8\xbb\xaa\x1b\x23\x4f\xae\xce\x9d\x9c\xbd\xbb\x88\xa5\x69\xa4\x6b\x10\xf7\x02\x23\x5d\x46\x4f\x97\xd1\xd6\xd6\xd1\xce\xb4\xdc\xc6\x38\xc3\x3c\x8e\x38\x19\xdd\x21\x12\x86\xde\x5f\xab\xfd\xe8\x37\x0a\xf8\xfb\x32\xb5\xea\xe8\x67\x18\x9c\x4f\x79\xd1\xfc\xad\xb6\x2e\x71\x41\xd5\x09\x62\x4a\x3a\xa8\xa5\x8d\x8a\x93\x6f\xfe\x94\x83\x67\xd7\xd4\xe5\x3c\x44\x9e\x2c\x9f\xec\x88\x3f\xca\x18\x93\xc6\x52\xf0\x83\x2f\xad\x23\x27\xdd\x3f\x82\x21\x11\x87\x3c\xb0\xa5\xce\x37\xf5\x5c\x8c\xee\xba\x57\xd7\x05\x98\xfa\x5f\x60\x74\xa9\x48\xb4\x2d\xc0\xe0\x26\xcc\x7b\x7d\xdf\x94\x9b\x2b\x97\xe5\x9f\x17\xb9\xda\x7b\x37\xe2\xeb\x76\x49\xaa\xa1\x92\x53\x30\x38\xc3\x53\xd5\x7c\x4d\x55\x0d\x95\x7a\x57\xf5\xe5\xf4\x4f\x00\x00\x00\xff\xff\x18\x6f\x1c\x53\xad\x09\x00\x00")

func ExampleConfigTomlBytes() ([]byte, error) {
	return bindataRead(
		_ExampleConfigToml,
		"../../example/config.toml",
	)
}

func ExampleConfigToml() (*asset, error) {
	bytes, err := ExampleConfigTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../example/config.toml", size: 2477, mode: os.FileMode(436), modTime: time.Unix(1610308008, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _ExampleIncludesBaseHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x92\x41\x8f\xd3\x30\x10\x85\xef\xfb\x2b\x06\x4b\x65\x0f\xd0\x9a\xee\x09\x81\x13\x09\xed\x22\x71\x41\x70\xd8\x0b\xc7\x89\x33\x6d\xac\x3a\xb6\x65\xcf\xb6\x44\x25\xff\x1d\xb9\x49\x9a\x48\x55\x4f\xf1\x9b\xf1\xf7\xde\x24\x19\xf5\xee\xe5\xd7\xf3\xeb\x9f\xdf\xdf\xa1\xe1\xd6\x96\x0f\x2a\x3f\xc0\xa2\xdb\x17\x82\x9c\x28\x1f\x00\x00\x54\x4b\x8c\xa0\x1b\x8c\x89\xb8\x10\x6f\xbc\x5b\x7f\x16\x20\x97\x4d\x87\x2d\x15\xe2\x68\xe8\x14\x7c\x64\x01\xda\x3b\x26\xc7\x85\x38\x99\x9a\x9b\xa2\xa6\xa3\xd1\xb4\xbe\x88\x8f\x60\x9c\x61\x83\x76\x9d\x34\x5a\x2a\xb6\xb3\x15\x1b\xb6\x54\x9e\xcf\x10\x70\x4f\xaf\x59\x40\xdf\x2b\x39\x94\x6f\xd2\x6a\x4a\x3a\x9a\xc0\xc6\xbb\x45\xe0\x48\xbf\xcc\x4d\xe8\xfb\x39\xc2\x1a\x77\x80\x48\xb6\x10\x46\x67\xae\x89\xb4\xbb\x40\x98\x12\x71\xfa\x77\xa0\xee\xcb\xe3\x0e\x8f\xb9\xbb\x31\xda\x3f\xde\xa1\xd1\x32\x45\x87\x4c\x02\xb8\x0b\x54\x08\x0c\xc1\x1a\x8d\x39\x50\xc6\x94\x3e\xfc\x6d\xed\xe4\x9e\xf5\xe6\xa2\x6f\x7d\x12\x77\x96\x52\x43\xc4\x77\x66\x19\x2e\x6c\x74\x4a\x8b\x51\x94\x6c\x08\xeb\xcb\xa9\xf2\x75\x37\xba\xe6\x1a\xc5\x41\x64\xb9\x2d\x7f\x76\x50\x61\xa4\xca\x3b\x4a\x70\xa2\x2a\x19\x26\x25\x9b\xed\x08\xc8\x25\xa1\x1c\x1e\xaf\x2c\x4e\xa3\x8b\xf2\x87\x6f\x49\x49\xbc\x6d\x61\xe5\xdf\x78\x93\x17\x46\x94\xdf\xf2\xf9\x7a\x4b\xc9\xab\x97\x6a\xd1\xb8\x89\x3d\xaf\xa0\xb2\x5e\x1f\xa6\xbf\x05\xab\xfe\xbc\x02\x72\xf5\x50\x5d\xf5\x23\x3d\x33\x6a\xe7\x3d\x2f\xde\x29\x94\xcf\x3e\x74\xd1\xec\x1b\x86\xf7\xda\x87\xee\x2b\x3c\x7d\x7a\xda\x2a\x19\xa6\xe4\x19\x50\x72\xf8\x36\x4a\x0e\xbb\xfd\x3f\x00\x00\xff\xff\xea\x68\xa0\x3f\xec\x02\x00\x00")

func ExampleIncludesBaseHtmlBytes() ([]byte, error) {
	return bindataRead(
		_ExampleIncludesBaseHtml,
		"../../example/includes/base.html",
	)
}

func ExampleIncludesBaseHtml() (*asset, error) {
	bytes, err := ExampleIncludesBaseHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../example/includes/base.html", size: 748, mode: os.FileMode(436), modTime: time.Unix(1610146656, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _ExampleIncludesPageHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x34\x8c\x3b\x0a\x03\x31\x0c\x44\x7b\x9f\x62\x1a\xb1\x5d\x02\x5b\x1b\xdf\xc5\x1f\x05\x87\x38\x72\x61\x15\x01\x45\x77\x0f\x26\x6c\x3b\xf3\xde\x33\x02\x7f\x94\xa5\x2d\x1c\x25\x2f\xbe\x75\x7d\x8f\x03\xe4\xc1\x08\x65\xcc\xfa\x42\x9d\xa2\x2c\xba\x37\x20\xf6\x33\x99\x41\x9f\x3a\x18\xee\xf1\xde\xcf\x14\x00\xb3\x0b\xfb\xae\xfc\xd8\xcf\xf6\x59\xda\x3f\x41\x1e\x7e\x01\x00\x00\xff\xff\x64\xa4\xdc\xd6\x69\x00\x00\x00")

func ExampleIncludesPageHtmlBytes() ([]byte, error) {
	return bindataRead(
		_ExampleIncludesPageHtml,
		"../../example/includes/page.html",
	)
}

func ExampleIncludesPageHtml() (*asset, error) {
	bytes, err := ExampleIncludesPageHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../example/includes/page.html", size: 105, mode: os.FileMode(436), modTime: time.Unix(1610158630, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _ExampleIncludesPaginationHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x8f\x41\x0a\xc2\x30\x10\x45\xf7\x3d\xc5\xa7\x10\xb7\x39\x80\x63\x8e\xa0\x67\x18\x98\x09\x06\x74\x2c\xb1\x54\x21\xe4\xee\xd2\x14\x17\x45\x21\xbb\x2c\xde\x7f\x79\x43\xc6\x4b\x18\x80\xe2\x90\x22\xa6\xac\x0b\x5c\x1d\x00\x80\x9e\x13\x5b\x68\x4f\x80\x18\xd7\xac\xf1\x34\x96\xb2\x41\xb5\x8e\xe1\xac\x2f\xcd\xe4\x79\x83\xc8\x7f\x07\xc5\x41\x4d\x52\x5c\x4d\x7b\x35\x9b\xc0\xf4\x3d\xef\xff\x38\xdc\x93\xc8\x63\x3e\x76\x0c\xbf\xc3\x3f\x71\x0d\x5a\xe3\x2e\x37\xe9\xc6\x91\x6f\xd7\x7f\x02\x00\x00\xff\xff\xb4\xd2\x66\x49\x04\x01\x00\x00")

func ExampleIncludesPaginationHtmlBytes() ([]byte, error) {
	return bindataRead(
		_ExampleIncludesPaginationHtml,
		"../../example/includes/pagination.html",
	)
}

func ExampleIncludesPaginationHtml() (*asset, error) {
	bytes, err := ExampleIncludesPaginationHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../example/includes/pagination.html", size: 260, mode: os.FileMode(436), modTime: time.Unix(1610048080, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _ExampleIncludesPostHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x34\x8e\xb1\xca\xc3\x30\x0c\x84\xf7\x3c\xc5\x61\x30\xd9\xfe\x3f\x78\xe8\x50\xd2\x3c\x40\xdf\xc2\x89\x55\x1c\xea\x38\x83\x35\x14\x14\xbd\x7b\x51\xda\x2e\xe2\x74\xe8\x74\x9f\x78\xd0\x8b\xa9\xa6\x86\x7e\x8e\x8d\xfe\x32\x6f\xa5\x87\xd7\x4e\x3c\xe6\xb2\x2f\x4f\x2c\x7b\x65\xaa\x6c\x1e\x30\xe6\x30\x89\x80\x57\x2e\x04\xd5\xf1\x3f\x87\xc9\x6c\x5e\x37\x42\x8a\x4c\x26\x6e\x4e\xe4\x5c\xa0\xea\xa6\xaf\x3e\x6c\x5c\x5d\xc0\x3d\x56\x84\x61\xb8\xb8\x33\x6f\xf7\xf6\x41\xe4\x57\x74\xb4\xf8\xb0\xa4\x11\x50\x4d\x1f\x08\xaf\xdd\x3b\x00\x00\xff\xff\xcc\xdc\x19\xc2\xab\x00\x00\x00")

func ExampleIncludesPostHtmlBytes() ([]byte, error) {
	return bindataRead(
		_ExampleIncludesPostHtml,
		"../../example/includes/post.html",
	)
}

func ExampleIncludesPostHtml() (*asset, error) {
	bytes, err := ExampleIncludesPostHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../example/includes/post.html", size: 171, mode: os.FileMode(436), modTime: time.Unix(1610158640, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _ExamplePages404Html = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\x56\x55\x48\xad\x28\x49\xcd\x4b\x29\x56\x50\x4f\x4a\x2c\x4e\xd5\xcb\x28\xc9\xcd\x51\x57\x50\xad\xe5\xaa\x56\x55\x48\xca\xc9\x4f\xce\x56\x48\xce\xcf\x2b\x49\xcd\x2b\x01\x89\xd9\x64\x18\xd9\x99\x18\x98\x58\x29\xf8\xe5\x97\x28\xa4\xe5\x97\xe6\xa5\xd8\xe8\x67\x18\xd9\x81\xd4\xa6\xe6\xa5\x40\x94\xab\xd6\x72\x01\x02\x00\x00\xff\xff\x1e\xca\xf3\x70\x55\x00\x00\x00")

func ExamplePages404HtmlBytes() ([]byte, error) {
	return bindataRead(
		_ExamplePages404Html,
		"../../example/pages/404.html",
	)
}

func ExamplePages404Html() (*asset, error) {
	bytes, err := ExamplePages404HtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../example/pages/404.html", size: 85, mode: os.FileMode(436), modTime: time.Unix(1610047772, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _ExamplePagesAboutMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd2\xd5\xd5\xe5\x2a\xc9\x2c\xc9\x49\xb5\x52\x70\x4c\xca\x2f\x2d\xe1\x02\x09\x78\xa4\x16\xa5\x2a\x64\x16\x2b\x94\x64\xa4\x2a\x28\x25\x82\x84\x95\x14\x0a\x12\xd3\x53\xf5\xb8\x00\x01\x00\x00\xff\xff\xd5\xb0\x65\x7c\x2f\x00\x00\x00")

func ExamplePagesAboutMdBytes() ([]byte, error) {
	return bindataRead(
		_ExamplePagesAboutMd,
		"../../example/pages/about.md",
	)
}

func ExamplePagesAboutMd() (*asset, error) {
	bytes, err := ExamplePagesAboutMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../example/pages/about.md", size: 47, mode: os.FileMode(436), modTime: time.Unix(1610158692, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _ExamplePagesIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x90\xb1\x6e\xc3\x30\x0c\x44\xf7\x7c\xc5\xc1\x80\xe0\x2d\x0e\x3c\x74\x28\xd4\x4c\x9d\x3a\x75\xe8\x0f\x30\x16\x53\x0b\x55\xa8\xc0\x66\x81\x02\xaa\xfe\xbd\xa0\x0d\x37\xc9\x24\xea\xa8\x7b\xd0\x5d\x71\xe0\x1f\x65\x09\x33\xda\x13\xcd\xbc\x1f\xf5\x92\x5a\xb8\xba\x2b\x0e\xa7\x94\x87\x2f\x0c\x59\x94\x45\x4d\x03\x8a\xc3\x39\x4f\xb8\xe6\x59\x11\x65\x39\xe7\x75\x03\x78\x9a\x34\x0e\x89\x8f\xcb\x0d\xf0\x63\xbf\x8d\xb6\xc4\x38\xf1\xf9\xa5\x29\x65\x71\xed\xdf\x49\x47\xd4\xda\x1c\x37\xe1\x23\x6a\x62\xd4\xea\x3b\xfa\x27\x74\x37\x84\xd7\x78\x61\x04\x52\xb6\xe1\xc6\x79\x25\xe5\x07\x8e\x09\xbf\xf6\xee\xb9\xe9\xf1\x46\x82\xfe\x70\x78\x6a\x16\xb0\x39\x57\x9e\xef\xee\x3e\x6b\x25\x48\xb0\x5c\x5b\xc6\x28\x43\xfa\x0e\x8c\xf6\x4a\x9f\x51\x48\x63\x96\x87\x66\x58\xc2\x5a\x8e\xab\xbb\xbf\x00\x00\x00\xff\xff\x77\xe5\x06\xe6\x43\x01\x00\x00")

func ExamplePagesIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_ExamplePagesIndexHtml,
		"../../example/pages/index.html",
	)
}

func ExamplePagesIndexHtml() (*asset, error) {
	bytes, err := ExamplePagesIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../example/pages/index.html", size: 323, mode: os.FileMode(436), modTime: time.Unix(1610158671, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _ExamplePostsFirstPostMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x14\xca\x41\x0a\xc2\x30\x10\x05\xd0\x7d\x4e\xf1\x5d\xb9\x4a\xa8\x5d\xf6\x00\xa2\xc7\x18\xe8\xa0\xb1\x69\xa6\xcc\xfc\x22\xde\x5e\x02\x6f\xf9\x72\xce\x89\x95\x4d\x17\xdc\xab\x07\x71\x58\xf0\x92\x56\xa1\x2e\x98\xa7\xf9\x96\xa7\x21\x8d\xf7\xd0\xd6\xac\xe0\x79\xdd\xe1\x2a\xad\xfd\xf0\x39\x83\x78\xab\x2b\x68\x58\x75\xb7\x1e\x74\xa1\xe2\x90\x57\xed\xc2\x6a\xbd\x94\x02\xe9\xeb\x08\xbb\x6c\x8a\x38\x5d\x51\x89\xaf\xf9\x16\x25\xfd\x03\x00\x00\xff\xff\x0b\x93\x1a\x2f\x80\x00\x00\x00")

func ExamplePostsFirstPostMdBytes() ([]byte, error) {
	return bindataRead(
		_ExamplePostsFirstPostMd,
		"../../example/posts/first-post.md",
	)
}

func ExamplePostsFirstPostMd() (*asset, error) {
	bytes, err := ExamplePostsFirstPostMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../example/posts/first-post.md", size: 128, mode: os.FileMode(436), modTime: time.Unix(1610158736, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _ExamplePostsFourthPostMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x91\xc1\x8e\xe2\x30\x10\x44\xef\xfe\x8a\xda\xd3\x92\x40\xb2\x01\xed\x29\xda\xdc\xd9\xfb\xdc\x10\x1a\x1c\xdc\x21\x96\x1a\xdb\x63\x1b\xd0\xfc\xfd\xc8\x0e\x03\x41\x93\x5b\xaa\x5e\x75\x75\xd2\x55\x55\x89\xa8\x23\x53\x8b\x2d\x31\x5b\xdc\xac\x67\xf5\x4b\x28\x19\xa9\xc5\xa6\xd9\xac\xab\x66\x5d\x35\x7f\x45\x02\xdf\x46\x1d\xa0\x03\xe2\x48\x28\x0d\xdd\x28\xc4\x12\xce\x86\x58\xe3\x7f\x44\x18\xed\x85\x15\x7a\x82\x35\x13\x52\x0e\xda\x87\x58\x96\x70\xf2\x44\xb5\x10\x5b\xf2\xf4\x3b\x20\xd8\x33\xe1\x68\x15\xb5\x42\x1c\x0e\x07\xf7\x19\x47\x6b\x84\xa2\x01\x1f\xc1\xfa\xb8\x90\xde\xaf\x70\xec\x3b\x96\xe7\x5e\x49\xc8\x15\xfa\x16\x12\xff\xd0\x17\xad\x00\x00\xe9\xfd\x3b\x93\x41\x07\x26\x93\xf0\x22\xcb\x7a\x78\x3a\x1d\x9a\x89\x4d\x8f\xa7\x78\xf1\x06\xbb\x7d\x56\x88\x5f\xc1\xf5\x0f\x50\x7a\x2f\xb2\x76\xd6\x4a\x31\xa1\x83\x36\x79\xad\x1c\xf9\x83\xcd\xd4\xe7\xf4\xd5\x46\x74\x09\xaf\x9d\x75\x8b\x89\x2e\xa6\x28\xd3\x90\xbc\x7b\xa7\xd7\xa7\x71\xf6\x7a\x1b\x35\xd3\x63\xf9\x67\xff\x55\xf2\x6c\x5e\xf1\xd0\xf5\x80\x63\xbf\xb8\x4a\x5e\x4d\xa5\xb3\xc8\x77\x57\x2d\x9d\x23\xa3\x12\xf4\xcc\x11\x07\x7a\x45\xf3\x22\x2f\xac\x98\x7d\xf8\xf4\xff\xd3\xb8\x74\x80\x02\x4b\xec\x72\xdf\x1e\xcb\xbb\x97\xf3\xd9\x4c\xa7\x13\x5f\x01\x00\x00\xff\xff\x3f\x9a\xd4\xa4\x3f\x02\x00\x00")

func ExamplePostsFourthPostMdBytes() ([]byte, error) {
	return bindataRead(
		_ExamplePostsFourthPostMd,
		"../../example/posts/fourth-post.md",
	)
}

func ExamplePostsFourthPostMd() (*asset, error) {
	bytes, err := ExamplePostsFourthPostMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../example/posts/fourth-post.md", size: 575, mode: os.FileMode(436), modTime: time.Unix(1610158807, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _ExamplePostsSecondPostMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd2\xd5\xd5\xe5\x2a\xc9\x2c\xc9\x49\xb5\x52\x08\x4e\x4d\xce\xcf\x4b\x51\x28\xc8\x2f\x2e\x51\xe4\x4a\x49\x2c\x49\xb5\x52\x30\x32\x30\x32\xd4\x35\x30\xd4\x35\x30\xe2\x02\x29\x0c\xce\xcf\x4d\x55\xc8\xcd\x2f\x4a\x55\xc8\x2d\x2d\xce\xcc\x4b\x2f\xd6\xd3\xd3\xe3\x02\x04\x00\x00\xff\xff\xa8\x08\xcc\xc2\x42\x00\x00\x00")

func ExamplePostsSecondPostMdBytes() ([]byte, error) {
	return bindataRead(
		_ExamplePostsSecondPostMd,
		"../../example/posts/second-post.md",
	)
}

func ExamplePostsSecondPostMd() (*asset, error) {
	bytes, err := ExamplePostsSecondPostMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../example/posts/second-post.md", size: 66, mode: os.FileMode(436), modTime: time.Unix(1610047929, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _ExamplePostsThirdPostMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x1c\xcc\x31\x0e\x02\x21\x10\x05\xd0\x7e\x4e\xf1\x0f\xe0\x24\xec\xda\x6d\x63\x61\x65\xef\x05\x50\xbe\x30\x91\x00\x91\xd1\xc4\xdb\x1b\xf7\x00\xef\xa9\xaa\xb8\x79\xe5\x86\x6b\xb1\x57\xc2\xe8\xd3\x0f\xb0\x07\xbe\xfd\x8d\x7b\x6c\xb8\xb1\x1a\x3f\x84\xb9\xa4\xe8\xdc\xb0\x86\x75\xd1\xb0\x68\x38\xca\x5f\x9f\x63\xc3\x05\x4f\x72\xc0\x0b\x27\xf7\x61\x22\x77\x6b\xf9\x24\xf2\x0b\x00\x00\xff\xff\xd9\xa6\x7a\xcc\x61\x00\x00\x00")

func ExamplePostsThirdPostMdBytes() ([]byte, error) {
	return bindataRead(
		_ExamplePostsThirdPostMd,
		"../../example/posts/third-post.md",
	)
}

func ExamplePostsThirdPostMd() (*asset, error) {
	bytes, err := ExamplePostsThirdPostMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../example/posts/third-post.md", size: 97, mode: os.FileMode(436), modTime: time.Unix(1610158772, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _ExamplePublicFaviconIco = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5b\x79\x54\x54\x57\x9a\x7f\x64\x32\x67\x26\xf9\x67\x92\x39\xa7\xfb\xdf\x49\xcf\x9c\xb1\xfd\x33\x66\x96\x7f\xd8\x44\x12\xed\xe0\xd8\xdd\xc9\x8c\xd3\xad\x56\x15\xc5\x22\x82\x80\x2c\x82\x2c\x02\x16\x5b\xbd\x07\x93\x46\x6b\x81\x62\x11\x50\x11\x50\x50\x01\x65\x47\x90\x45\xa8\xf7\x90\xa4\xdb\x69\xd3\x3d\x68\x7a\xda\x8c\xd1\x18\xa3\x88\x0a\xa1\xaa\xe2\xe1\x9b\xf3\xdd\x7a\x0f\x5e\xbd\x7a\xb5\xcb\x5f\xdd\xf7\x9c\xef\x50\x55\xef\xdd\x7b\xbf\xfb\xad\xbf\xef\xde\x0b\x45\x05\x51\x7f\x41\xbd\xf5\x16\xfe\x7d\x87\x4a\x7c\x9d\xa2\xfe\x95\xa2\xa8\x77\xde\xb1\x7f\xdf\xfc\x36\x45\x35\xbd\x4e\x51\xef\xbe\xcb\x3f\xdf\x44\x51\x33\x3f\xa0\xa8\xcd\x14\x45\xbd\x85\xef\x51\xf6\xdf\xbd\x6d\xcb\x33\xf4\x16\x0b\x47\x9b\xac\x2c\x33\x6f\x9d\x65\xac\x84\x38\x66\xde\xc2\xd2\xa6\x65\x33\xbd\x85\x0a\xe2\x5f\x0c\x72\xec\x07\x33\x55\x6f\x58\x66\x99\x7a\x2b\xc7\xac\x5a\x59\x06\x9e\x9a\xcb\x61\x61\xba\x1c\xf0\xf3\xd0\x40\x1e\x14\x9f\x4d\x81\xa7\x33\xda\x55\x7c\x07\xcc\x55\x6f\x38\xf4\x35\x57\xbd\x61\x63\x99\x09\x2b\xc7\x00\x21\x96\x81\xaf\xa6\x4a\x61\xbb\x51\x05\x27\x2f\x66\x42\xa4\x5e\x05\xc1\x3a\x05\x1c\xef\x48\x23\xcf\x6c\x1c\x33\x81\xf3\xad\xf1\xcc\x6a\xeb\xc5\x7d\x91\x16\x67\xb4\x10\xa1\x57\x42\xf0\x09\x05\xe9\x8b\x7f\x6b\x2f\x66\xd8\x9f\x73\x0c\x20\x1f\xd8\xf7\x7d\x83\x6a\xcb\xec\x48\xc1\xaa\xd0\x4f\x3c\xc6\xcd\xab\x45\x90\x75\x26\x09\x52\x4f\x1d\x80\x86\x8b\x99\x30\x7f\x4d\x03\x77\x27\x4a\x84\xf7\x56\x51\x56\x21\x06\x45\xed\x67\x57\x8b\x1c\xfb\xe2\xf8\x1c\x03\xb5\x17\x32\xe0\xea\x40\x3e\x5c\x1f\x3a\x0a\xda\xb6\x54\xf8\xcd\x68\x11\xac\xf1\x89\xef\xb0\xb4\x29\xf4\x84\xe2\xf6\x91\x33\x49\xf0\x62\x46\xeb\xf0\x0c\xe9\x8b\xf1\x62\x98\x19\x29\x80\xa5\x19\xda\x61\x6c\xd1\x5a\xe7\x43\x0c\x4a\xdb\xee\xba\x58\x68\xef\xce\x26\xcf\xff\x30\x5e\x0c\xda\xf6\x54\x78\x6e\xd6\x42\xcc\xc9\xfd\x84\x0f\xe9\xb8\x6b\x63\xcd\x32\xd6\x5f\xd6\xc6\xda\xce\x77\x67\x43\x47\x8f\xbd\xff\x89\x8e\x34\xf8\xd8\x14\x03\x79\x2d\x07\x89\xdc\x70\xfd\x8f\x79\x3d\xca\xf5\xcf\x69\x39\x78\x3b\xcc\xa0\x84\x10\x9d\x82\xf4\xd9\x51\x1d\xbd\x2e\x73\x9e\xaa\xce\xa5\x81\x83\x8c\xc4\xfc\xeb\x15\xb5\x0e\xef\x4b\x3f\x9f\x50\x80\xbe\x33\x1d\xd8\x91\x42\x27\x19\xa0\x9d\x86\x1a\x15\xef\x05\xeb\xf6\xad\x3a\xf5\x15\x51\xa8\x41\x01\x9f\x9c\x3b\x24\xd5\xd1\x2a\xb1\x67\x8a\xa2\x42\xf5\x8a\x06\xd9\xfe\xa2\xef\xec\x48\x01\xb1\x49\xa1\xbf\x60\x3f\xe8\x07\xbb\xab\x76\xbf\x11\xa2\x57\x4c\x3a\xf5\x15\xf5\xff\xa9\x49\x0d\x5b\xf5\x4a\xe8\xef\xcd\xb5\xdb\xaf\xc4\x07\x70\x8c\x70\xc2\xc7\xbe\xd5\xe4\xe6\x03\x50\xda\x96\x0a\x27\x3a\xd3\xa0\xb7\x2f\x17\x4e\x5e\xca\x84\xc9\xa1\xa3\xf0\xc7\x89\x92\xd5\xe7\x66\xad\xa3\xff\x88\xfd\x30\x88\xa2\xfa\xfb\x73\xb7\x3c\x33\x97\x9b\xd0\x67\xd7\xfc\x97\x15\xf9\xaf\x5c\xbf\x00\xda\x66\x3e\xc6\x6c\xf5\x31\xce\x90\xf9\x83\x9c\xf9\x58\x98\x63\xfe\xc6\xca\xd1\x7b\x2c\x5c\x45\x83\x95\x65\xe6\xac\x1c\xf3\xd8\xca\x31\x2f\x79\x7a\x8c\xbf\x91\x67\x1c\xbd\x07\xdf\x75\x1a\xd3\x97\x26\x7a\xdf\xc2\x69\x37\x59\x39\xa6\xd1\xc6\x31\xcb\xb2\xfe\x22\x43\xfc\xbb\x8d\xd8\xd7\xd3\xf8\xae\x78\x7b\x30\xa7\x79\xd3\x36\x5b\xf1\x89\x95\x63\x6c\x2e\xfd\x54\xf2\x19\x63\xd0\xb9\x9e\x6c\xb8\x33\x5e\x2c\x3c\xb3\xd9\x6e\x54\x7c\x82\x63\xf9\xb2\x7c\x0b\x5b\xf9\x8f\x16\x8e\xbe\xe5\x6a\x3e\x8c\x57\x73\x82\xdf\xf1\x84\x7e\x1c\x8e\x71\x55\xa7\x20\xf1\xf9\xd6\xd8\x31\x71\x3c\xbb\x85\x63\xba\x5b\xaf\xf0\xcc\x66\x2e\x7f\xcf\x36\xcb\x3c\x72\x27\xdf\xfe\xbe\x5c\x32\x4f\x62\x53\x02\x3c\x99\x2e\x87\x07\x53\xa5\xa0\x6c\x88\x77\x88\xe9\x51\xd5\xd1\xf0\x64\xa6\x7c\x5d\x27\xb3\xcc\x23\x1c\xdb\x9d\x2e\x90\x47\x4f\x73\x23\x7d\x3d\x59\x46\xe2\x1a\xce\xf3\x71\x6d\x0c\xec\xac\x51\xcb\xc6\x07\xa9\x8c\x6c\x37\x98\x47\x6b\x72\x90\xd1\x37\xca\xc9\x1b\xfb\xc2\x18\x1e\x61\x50\xca\xc7\x35\xd1\x6f\x63\x03\xf9\x4e\xb1\x15\xf5\x2a\x67\x0f\xdf\x4c\x95\xfd\xca\xed\xbc\xa2\x71\xd0\xbe\xfe\x4d\xba\x66\xc9\xdc\x19\xa7\x13\x61\x99\x95\xcf\x4f\x68\xd7\xe2\xb9\x7f\x5a\x13\xfb\xe3\x86\x8b\x99\x36\xa7\x3c\xe0\x86\x87\x2f\xa7\x4a\xc8\x1c\x72\x71\x1d\xf3\xe6\x53\x91\xee\x65\xc8\x26\xf6\xcd\x6d\x7a\x65\x33\xe6\x71\x87\x39\xdc\xf1\x22\x7a\x76\x6b\x4c\x03\xcc\xb9\x54\x88\x6f\xdc\x0f\x77\x26\x8a\x89\x6c\xbe\x9c\x2c\x01\xf3\x70\x01\xb1\x53\xcc\xf5\xdf\x09\x72\x70\xec\xdb\x88\x73\xff\xbc\x59\xfd\x56\x88\x4e\xf1\x5d\xcb\xa5\x2c\xcf\xb1\x45\x34\xef\xe7\x63\x1a\x82\x3d\xee\x4e\x96\xc0\x92\x99\x86\x15\x96\x26\x73\x6f\x33\x28\x89\x6d\x18\x3b\xd3\x61\xa8\x3f\x0f\x2c\x2e\xd6\x81\x31\x0a\xe3\x64\xa4\x41\xa5\x40\x99\xb5\x74\x65\xb9\x8e\x2f\x12\xc2\xf5\x20\xb6\xa8\xbf\x98\x09\x23\xfd\x79\x04\x4f\x20\xb6\x18\xec\xcf\x85\x9e\x2b\x39\x70\x5f\x94\x0f\xdd\x8e\xc7\xd2\x7b\xc2\xf5\xca\x46\x9c\x3f\xae\x71\xbf\xbd\x9f\x27\x1b\xe0\x31\x14\x83\x79\x9b\x63\xa0\xa3\x3b\x1b\x0a\xcf\x26\xaf\xcf\x29\x37\x97\x8b\x31\x31\x5f\x84\xe9\x95\x9f\x09\xb6\xbb\xbb\x36\x16\xee\x8e\x97\x78\x25\xff\x15\xb1\x4e\xfd\x25\x96\x99\x0b\xd5\x2b\x17\xc4\xb6\xbb\xc3\x18\x0d\x8f\xae\x97\x39\xcc\x87\xf2\x3e\xdb\x9d\x05\x75\x88\x53\xf9\xbe\xad\xdd\xd9\xb0\xb7\x3e\xce\x27\x9b\x91\xa1\xc7\xa1\x7a\x05\xc1\x48\x18\x2f\x6b\x2e\x64\x10\x59\x2e\x4a\x30\xe7\x7f\x9d\x3b\x44\x78\x6b\xee\x3a\x4c\xbe\xff\x71\xa2\x84\xd8\x59\xa4\x41\xb5\xee\xe3\x72\xfa\xf6\xac\xcb\x97\x61\x7a\xc5\x2a\xc6\x92\xfb\x93\xa5\x30\x31\x78\x14\x06\xfb\xf2\x1c\xc6\x78\x61\xd6\xc2\xfb\x06\x1e\xe7\x9f\x4f\x23\xbc\xa1\xbd\x09\xb1\x46\xd3\x9a\x02\xff\x73\x4d\xe3\x95\xdd\xc8\xcf\xaf\x7c\x52\xdd\x99\x0e\x53\x43\x05\x24\xa6\x87\xea\x14\xc4\x6f\x84\x77\x3e\xbd\x5a\xb4\xa6\x9b\x6d\x06\x15\x91\xb9\x34\xde\x60\xde\x43\x7f\x77\x92\x83\xac\xcd\x3b\xca\x1f\xed\x0f\xb1\xdc\x4f\x10\x1f\xf3\xe3\xa1\xff\xb6\x76\x67\x01\x3b\x5c\x00\x07\x9b\x0f\xc8\xc6\x38\x29\xa1\xfe\xbe\x9e\x2a\xb3\x63\x72\x1f\xec\x0f\xfd\xef\x57\xe7\xd3\xdc\x8f\xef\x06\xff\x8a\x7f\x43\x0c\x90\xdb\x72\x90\xd4\x27\x1e\xed\x90\xb5\xfb\x9f\x10\x7f\xdc\xce\xe9\x02\xbf\x8b\x9f\xed\xaa\x51\x13\x9f\xac\xbb\x90\xe9\x83\x2f\xd0\x7b\xf8\xf8\xbb\xe2\x71\x1e\x0f\xf2\x41\x0c\x8f\xf5\x9c\xe9\x42\x86\x57\xb2\x17\xe2\x2f\xe2\x8f\x30\xbd\xe2\xb4\x47\xf9\x7a\xa1\x97\x0f\x8c\x2a\xd0\x75\xa6\x93\x7a\xd4\x0b\x1e\x1a\x85\xfc\xb7\xdd\xa0\xde\x1c\xa2\xdb\xf7\xbd\x57\xb2\xf6\x42\x17\x95\x7c\x6c\x76\xa3\x03\x9b\x85\x75\xc4\xc6\x5b\xf5\xca\xe3\x81\xc8\x3f\x98\xf7\xdd\xae\x2b\x39\xa4\x26\x72\x2b\x7b\x09\xfe\xc0\xb6\xab\x36\xe1\xcd\x30\xbd\xe2\x73\xbf\xe6\x17\xf1\xd0\xd7\x97\x4b\xe6\x98\x1b\x2e\xb4\x63\x60\x2f\xf1\x17\xb6\x28\xa3\x6a\x53\xe8\x09\xc5\xb7\x5e\xd9\x82\x8b\xdf\xd1\x0f\x72\x5a\x0e\x92\x78\x80\x71\xa9\xfb\x4a\xce\xfa\xba\xc5\xf8\x53\x8a\xc3\xf9\xef\xdb\x4d\xd1\xff\x14\xaa\x93\xf0\xe0\x6b\x4c\x10\x7d\xc6\x1c\x81\x31\xc9\x01\x7f\x7b\xa8\xc7\xa2\xaa\x55\x9b\x88\x2e\x24\x73\x7c\x68\x8c\x26\xb5\x85\xf0\x3d\xba\x21\x1e\x2a\xce\x1d\x82\x5f\xd4\xc6\x12\xff\xc3\xb8\x99\x75\x26\x09\x4e\x77\x1d\x86\xe1\x81\x3c\xb8\x39\x7a\x8c\xe4\x52\x94\xb9\x13\xee\xf6\x50\x83\x25\xd4\x25\xbc\xb9\xcd\xa0\xac\x12\xfc\x22\x4c\xaf\x20\x63\x7d\x3b\x5d\x0e\xa7\xbb\xb2\x48\x8e\x58\x10\xed\x7f\x58\x78\x92\xd8\x9a\x0d\x6d\xed\xc1\xa7\x6e\xea\x2f\x57\xb2\xe0\x7f\x2f\x68\x49\xfa\x31\x3b\x72\xb4\xf1\x9b\xe9\xb2\x65\xd9\x1c\x2b\xf3\xd9\x63\xfd\xe9\xe5\xdc\xe2\xb6\xf0\xa9\x4c\xfd\xcd\x32\x2f\x09\x79\xaa\xbf\x7d\x9d\xff\x4f\xa8\x6d\xa6\x28\xea\x5d\x8a\xa2\xd4\xbe\xee\x93\x88\x9b\x07\x39\x02\x68\x5e\x5b\x9c\xa4\xdf\xb6\xdc\xa0\xff\xde\xc2\x6a\xa3\xac\x66\xa6\xdc\xca\xd2\x7d\x56\x8e\x9e\xb7\x72\xcc\xa2\x95\xab\x78\x69\x27\xfc\x4c\xcf\x93\x67\x33\x4c\x39\xbe\x8b\x7d\x16\xa7\xe8\xb7\x71\x0c\xff\x98\xf3\x8f\x67\xc2\xf7\x35\xcd\xeb\xcb\xe6\xca\xf7\xbe\xbf\x51\x91\x6d\x65\xe9\x1e\xeb\x2c\x73\xdf\x3a\x5b\xb1\xea\x35\xbe\xc1\x77\xb1\x0f\x4b\xf7\xe0\x18\x38\x16\x8e\xb9\xd1\x7c\x63\x5b\x99\x2e\xfb\x3b\x2b\x8b\x3e\xc8\xdc\x73\xb9\x87\xe3\x1b\xd9\xc8\x58\x2c\xd3\x88\x63\x07\xb4\x06\x17\x0d\x00\x82\xe0\x33\xed\x0f\xbe\x9f\xa5\x0f\xdb\x38\xfa\x99\x7b\xec\xe4\x9e\x30\x16\x62\xdc\xc7\x5a\x01\x6b\xd4\x65\x8e\x16\xc5\x27\xfa\x19\xce\x81\x73\xe1\x9c\x7e\x31\x2b\xd3\x6b\x65\x56\x1b\x6e\xe1\x98\x41\x59\x79\x3b\xe5\x61\xd7\xbc\x63\xbd\x85\xb5\x48\xf6\x99\x24\x92\x4f\x3f\xae\x8d\x81\xe6\x4b\x87\xe1\x3b\x8e\x96\xea\x63\x10\xe7\x94\xe5\xc9\x87\x55\x81\x46\xf3\x9a\x8d\xab\x8c\xb7\xb0\xf4\x43\x72\x4e\xe2\x85\xbc\x31\xef\x55\x77\x66\x90\xbd\x2f\xe9\x33\xac\x85\xb1\x46\x0a\x11\xe5\x4e\xcc\x8d\xf5\x17\x33\x60\xc5\x71\xdc\x55\x9c\x13\xe7\x46\x1e\xfc\x51\x03\xdc\xd1\xff\x95\x8d\xad\x48\xb7\x72\xcc\x92\x2f\xf6\x51\xd8\x9a\x4c\xf8\xfa\xb9\x29\x86\xec\x63\x60\x9d\x87\xbf\x2f\xcc\x94\x43\x4d\x67\xc6\x3a\xef\x22\x0c\xf0\xbe\x51\x45\xf0\x8c\x8c\xee\x96\x90\x07\xe4\xc5\x27\xde\x51\xee\xc8\x3b\xcb\x3c\xf1\xca\xce\x45\xcf\x2e\xf7\xe6\xac\xf1\x85\xbc\xea\x3a\xd2\xe1\xda\x60\x3e\xa9\x47\x43\xdd\x60\xa6\xfc\xd6\x64\x58\x10\xea\x6b\xc7\xb9\x9e\x90\x35\xf8\xa0\x07\xd4\x9b\xaf\x72\x17\xe8\xeb\xeb\x65\x10\xaa\x5f\xe7\x2d\x4c\xaf\x24\x35\xa8\xf8\x37\x39\xc2\x7a\xf4\x9b\xeb\x65\xae\xe4\xb4\x64\x63\x2b\xe3\x3d\xe7\x23\x08\x22\xbe\x6a\xb7\x77\xbf\x62\xcc\x32\x4b\x43\x94\x31\xda\x67\x8c\xae\x3e\x19\x2f\xeb\x33\x6b\x71\x81\xa5\x1f\x22\x6f\xee\xe2\x12\xc6\x2d\x3e\xce\x78\x9f\x8b\x24\x34\x3a\x90\x2f\x2f\x6b\x37\x35\x10\xea\xa8\xa4\x2d\x85\xf8\x88\x9b\xb1\x57\x91\x37\xe4\x91\x30\x2b\xb3\x0a\x76\xa4\x30\xcb\x6d\x4e\xf2\x42\x0f\x0f\xae\x97\x41\xb2\xb0\x37\xe1\xa9\x2e\xe4\x69\x5f\x43\x3c\xdc\x9d\x92\xd9\x5f\x73\xde\x2b\xb2\x61\x7e\x90\x93\xbd\xda\x94\xf8\x4e\x5c\xe3\xfe\xe7\x2e\xf7\xdf\xbc\xdc\xfb\x43\x42\x3c\x5f\xd2\x9e\xe2\xb0\xf7\x22\x47\x58\x47\x61\x3c\xfd\xc3\x44\xb1\xd7\x32\xc2\x1c\x27\xcd\xd3\x09\x75\x09\x7f\xf9\x81\x51\xd5\xb4\xb7\x3e\xce\x71\xdf\x2c\x00\x5a\x34\x6b\x49\xdc\x29\x6b\x4b\x25\xb1\x54\x88\x9b\xff\x5e\x1b\x03\x74\x7b\x2a\x1c\x3d\x9b\x0c\x75\x17\x32\x1c\xf6\x47\x71\x6e\x76\xb8\x80\xec\x21\x5b\xe4\xd6\xb3\xbe\x7f\xd5\x28\xc6\x4b\x51\x06\xe5\x3f\x87\xe8\x94\x5f\xa1\x0f\xbd\x0a\xde\xc5\xf4\xcc\xac\x25\xfb\x46\xed\x3d\x59\x90\xdf\x92\x0c\x03\xfd\xb9\xe4\x9c\xe3\xc9\xb4\xfd\xbe\xc0\xf8\x60\x3e\xc9\x13\x3d\xbd\x39\xa4\xbe\x2d\x6d\x4b\x81\x7b\x93\xae\xfd\xd8\x6a\xcf\xf1\xf7\x10\xf3\x21\xef\x1a\x8d\xe6\xb5\x6d\x46\x55\x4e\x88\x4e\x61\x4b\x6a\x4e\xf0\x8d\x3f\x17\xfb\x78\x2f\xcc\x34\xc1\x37\xbf\x1b\xd3\x90\xba\x10\x7f\x47\x8c\x20\xc8\x74\x9e\x3f\x27\x41\xfb\x41\xfa\x65\x5d\x1c\x89\x9f\xa7\x10\x4b\x78\xa7\x7f\x1b\xe2\x56\xc4\xde\x3b\x6b\xf6\xbe\x1d\x6e\x50\x5e\x41\xdd\xa6\x34\x1f\xf0\x5f\xd6\xa2\xb5\x34\x5e\xca\x24\xf8\xe6\x67\x26\x35\x39\x47\x7f\x34\x5d\x46\xf6\x99\x07\xfb\xf3\x88\xec\xf5\x9d\xe9\xf0\x61\x75\x34\x64\x9e\x4e\x02\x53\x67\x06\xd1\x85\x53\xee\xf5\x78\x66\x43\xf7\x60\xfd\xb0\x4d\x1f\xfd\x0f\x61\x3a\xc5\x43\xe4\x3f\xa9\xc9\x47\xf9\xcb\x10\xf2\xb7\xb3\x46\x0d\xc7\x3b\xd2\x61\xfe\x5a\x31\x0c\xf4\xe6\x82\xaa\x21\x9e\xe0\x1c\xb4\xfd\xb9\xe1\x42\x62\x2f\xff\x3d\x7a\x8c\xe0\x50\x59\x7f\xf3\x26\xdf\xcc\x32\xf7\xb1\x06\xfa\xb0\x5a\xbd\x4b\x88\x07\x1f\x99\x62\xe0\xb7\x63\xc7\x02\x3a\x03\xb0\xb0\x34\xa8\xea\xe3\x09\x7f\xf8\x7d\xb0\x2f\x8f\xd8\x0a\xae\xe1\xfa\x50\x81\xef\xf6\xe8\x92\xff\x8a\x55\xac\xe3\x22\xf5\x2a\x46\x8c\x57\xf6\xd4\xc7\xc1\xd8\x60\x7e\x40\x3e\x80\x76\x22\xec\x37\x23\x7e\xbb\x31\x52\x08\x0f\x85\xb3\x0b\x7f\xfd\x4a\x8e\xcc\x4c\x79\x84\x41\x35\x28\xcd\x91\x51\xd5\xd1\xe4\x8c\x6d\xc5\x5f\x1d\x04\x68\x83\xde\xaf\x93\xee\xdb\x6a\x50\x7d\x21\x97\xe7\xb7\x19\x54\xd0\xde\x93\xed\xd2\x96\x10\xaf\xff\xef\x44\x09\xc1\x97\xe6\x11\x47\xbb\xc0\xd8\x53\xd4\x9a\x0c\xa9\xa7\x12\x37\x78\x0d\xf4\x7c\xb8\x41\xb5\x2c\xe6\x3f\x84\x27\xfc\x8c\xb9\xe7\xb9\xd9\xf9\x9e\x12\xae\x09\xe3\xb5\xb2\x21\x9e\x60\x9d\xb9\xab\x85\x0e\xfb\x65\x39\xfc\x5d\xa2\x9f\x99\x62\x5e\x8d\xad\xbb\xa6\x45\xe1\x9c\x4b\xd8\x93\x3c\xd5\x75\x18\x7e\x3d\x5a\x44\xea\x09\x76\xb8\xd0\x6e\x0b\x92\xb9\x7e\x7f\x4d\x03\xff\x51\x1b\xbb\xd6\x47\x74\xaf\x02\xae\xf4\xe6\xae\xdd\x77\x40\x1d\x3e\x95\xb9\xa7\xe5\x92\x77\x1f\x30\x8a\xfd\x79\xc5\xcb\x70\x83\x72\x15\x6d\x66\xbb\x51\x45\xe2\x03\xc6\xb3\xdb\xe3\xc5\xe4\xcc\x65\x49\xc6\x76\x70\x3d\xed\xdd\xd9\x64\x5f\x14\x79\xc4\xbf\x37\x47\x8f\x91\xdf\x7f\x33\x7a\x8c\xc4\x7c\xb1\x3e\xe9\xb6\x54\x52\xa7\x63\x4e\x7b\xf5\xf6\x53\xf1\x32\xc2\xa0\x7c\x81\xf3\x18\x3b\xd3\xc9\x79\x75\xd7\x95\x1c\xf8\xa8\x36\x06\xa2\xaa\xd5\xa4\x96\x92\xc6\x67\xc4\x03\x98\xe3\xc5\x3c\x16\xb7\xa6\x10\x5d\x25\x36\x25\x38\xd4\xb6\xc1\xfc\xde\x3f\xea\xea\xf8\xf9\x34\x92\xa7\x7c\xf3\x4f\xcf\xf6\x13\x61\x50\xdd\xf9\xc0\xa8\x82\xcf\xc7\x8e\xc1\x97\x93\xa5\xf0\x9f\x75\xb1\x0e\x7b\xee\x0e\xe7\x7f\x1c\x43\xe2\xe0\x81\xa6\x04\x27\x1c\x89\x39\x4b\xca\xbb\xc3\x3a\xf4\x4a\x28\x6f\x4f\x95\xd5\xa9\xff\xfe\x41\xcf\x87\xeb\x55\x43\x09\x8d\x09\x24\x6f\xa9\x1b\xe2\x9d\xcf\x0d\x4c\x6a\xb8\x39\x5a\x44\xce\x61\xb1\xbe\x43\xfd\x84\xf1\xb6\xe3\x2b\x61\x9d\x7e\xe9\x8a\x5d\xa7\x68\x4f\x01\xc7\x59\x96\xee\x8b\xd4\x2b\x2b\x8e\x9c\x49\x22\xd8\xc9\xd5\xbc\x91\x46\x15\x89\x35\x58\x97\x44\x1a\x54\x7e\xf1\x2e\x10\x62\x9e\xaf\x26\x4b\x49\x9c\xe8\xeb\xcb\x0d\xcc\x2f\xcc\x4c\x39\xe2\x07\xc4\x6d\x29\x4d\xde\x9d\xe7\x06\x4a\x18\x5b\x31\x37\x0f\xf7\xe7\x91\xbb\x12\xcf\x64\xe2\xb3\x57\x84\xf8\x81\xd3\x46\x21\x7e\x0b\xe7\xf1\x9b\x47\xf2\xf7\x1c\x4f\x54\xe7\x9e\xee\x3a\x4c\xec\xa6\xad\x27\x9b\xd8\xac\xdf\xb2\xe7\xf1\xdb\x8e\xaa\xb8\xbf\x0d\xd3\x2b\x7a\x5f\x35\xaf\x72\x84\xf9\xa0\xe3\x72\x36\xc9\xdd\x55\xe7\xd3\xd6\xcf\xe0\xfc\xc9\x65\x3c\x7e\xc6\xfa\x65\xab\x41\x99\x1b\xac\x53\xd8\x36\xda\x76\x30\x3e\xed\xae\x8b\x85\x5f\x5f\x2d\x22\xf7\x94\xa7\x3c\x9c\xa7\xba\x89\x4d\x6b\xf5\x0b\xd6\x60\x91\xd5\xfb\xfe\x05\xeb\xc7\x8d\xb2\x1b\x29\x61\x8c\xc6\xba\xe6\x77\xd7\x34\xbe\xd5\xdb\xeb\x18\x65\xad\x7e\x14\xea\xf7\x08\x83\xe4\xac\xde\x57\xf2\x71\x8d\x98\xd7\xb0\x2e\xf8\xbd\x77\x67\xfa\xd2\x75\x34\x4a\xcf\x3b\x76\x37\xc4\xff\x28\x4c\xaf\x78\x11\x90\xcc\xfd\xe8\xd3\xd7\x9b\xeb\x13\xef\x6b\xfb\x27\x32\xfb\x57\x58\xc7\x07\x0b\xf7\x15\x02\x25\xf1\xde\x95\x64\x5d\x98\xaf\x4f\x74\xa4\x41\x62\x73\x82\xd3\x1d\x7d\x0f\xe4\x72\xff\x8a\x22\x67\xec\xca\x1f\x86\x1b\x94\xc3\xc1\x22\x4c\xea\x93\x5c\x3d\xbd\x27\xba\x0f\x31\x3d\x5c\x40\xf6\x1a\x84\xf3\x69\x8f\x35\x2b\x2b\xd9\x3f\x14\x37\x41\x17\x40\x05\xed\xac\x56\x45\x84\xe8\x25\xf9\x60\x03\x62\x29\xe6\x31\x81\xb7\x2f\xc6\x8b\xa1\xa8\x35\x05\x6e\x8f\xbb\xf6\x05\x6f\xf6\x6f\x85\xb6\xcb\xa4\x3a\x10\xa2\x53\x2c\xbd\x6a\x9e\xc5\x84\x98\xb1\xf2\xdc\x21\x38\xd3\x95\x05\x09\x27\xed\x78\x70\xbb\x31\x9a\xdc\xcd\x5d\x72\xc6\x14\x4b\x36\xae\x32\xde\x13\xdf\x42\xc3\x9c\x10\x69\x54\x65\x86\xea\x14\x0b\x1b\xb9\x06\x39\xfa\x49\x75\x34\x5c\xee\xcb\x11\xef\x63\xf9\x7c\x7e\x81\x4d\xdd\xa4\xfe\x6b\x5c\x83\xac\x1e\x36\xc0\x9e\xd6\x7c\xdb\xa0\x24\xff\x43\xc4\xf3\xef\xfe\xfc\xc8\xc5\xff\x36\x89\xf5\xb0\xa3\x46\x99\x48\xfc\x41\xea\xd3\x22\x42\x5c\x40\xee\x6d\x8b\x7e\x0b\xe1\xff\x07\x64\x6f\x7d\x1c\x89\xf3\x88\x5b\xb1\x56\x0e\xe1\x71\x10\xd6\x0b\x7b\xea\xe3\x20\xed\x54\x22\x54\x9e\x3f\x44\xf6\xe7\x46\x07\xf2\x49\x3e\x58\x32\xd3\x01\x9f\xdf\x89\xd7\x88\x3e\x1d\xa1\x57\x0d\x85\xe8\x79\x8c\x21\x92\x7f\x74\x43\x3c\x5c\xb8\x7c\x84\xfc\x7f\x81\xfa\x64\x3c\xb1\xe1\x5f\xd4\xc5\xc2\xe1\xd3\x49\x24\x36\x2e\xce\x68\xc9\x5d\x49\xc4\x3a\x88\xdd\xea\x2f\x64\x92\x3b\xc5\xdc\x48\xa1\xe3\xbe\xe1\x3a\x06\x72\x3e\x3f\x0d\xb4\x01\x15\xf4\x91\x49\xf9\xc3\x1d\xd5\xca\x23\xe2\x1c\x87\x71\xb0\xba\xd3\x7e\x0f\x7b\x85\x63\xe0\xff\x26\x4b\x49\x2d\x8f\x7f\xbf\x95\xdb\xd3\xf4\x22\x37\x05\x7c\x7e\x2d\xd7\x44\x23\x65\x9d\x49\xf9\x51\x5b\x77\x56\xd3\xf8\x60\xfe\xbd\xdf\x8e\x15\xd9\x64\x62\x85\x2c\x66\x71\x97\x93\xbc\xba\x3f\x20\xb7\x1a\x6f\x7f\x93\xb4\x80\xef\x6f\xdc\xa8\x58\xb5\xde\x90\xb9\xbf\xe1\x8b\xc4\x3d\xbd\xeb\xcd\x3a\x40\xf3\x1a\x62\x70\x9f\xee\xcf\x98\x37\xf8\xfe\xcc\x9f\xdb\x9f\x9b\x0f\xed\xff\x03\x00\x00\xff\xff\xbe\xaa\x07\x82\x2e\x3c\x00\x00")

func ExamplePublicFaviconIcoBytes() ([]byte, error) {
	return bindataRead(
		_ExamplePublicFaviconIco,
		"../../example/public/favicon.ico",
	)
}

func ExamplePublicFaviconIco() (*asset, error) {
	bytes, err := ExamplePublicFaviconIcoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../example/public/favicon.ico", size: 15406, mode: os.FileMode(436), modTime: time.Unix(1610146363, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _ExamplePublicStylesCss = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4a\xca\x4f\xa9\x54\xa8\xe6\x52\x50\x48\xcb\xcf\x2b\xd1\x4d\x4b\xcc\xcd\xcc\xa9\xb4\x52\x50\x2a\x4e\xcc\x2b\xd6\x2d\x4e\x2d\xca\x4c\x53\xb2\xe6\xaa\xe5\x02\x04\x00\x00\xff\xff\x73\xed\x78\x1e\x26\x00\x00\x00")

func ExamplePublicStylesCssBytes() ([]byte, error) {
	return bindataRead(
		_ExamplePublicStylesCss,
		"../../example/public/styles.css",
	)
}

func ExamplePublicStylesCss() (*asset, error) {
	bytes, err := ExamplePublicStylesCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../../example/public/styles.css", size: 38, mode: os.FileMode(436), modTime: time.Unix(1610130635, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"../../example/config.toml":              ExampleConfigToml,
	"../../example/includes/base.html":       ExampleIncludesBaseHtml,
	"../../example/includes/page.html":       ExampleIncludesPageHtml,
	"../../example/includes/pagination.html": ExampleIncludesPaginationHtml,
	"../../example/includes/post.html":       ExampleIncludesPostHtml,
	"../../example/pages/404.html":           ExamplePages404Html,
	"../../example/pages/about.md":           ExamplePagesAboutMd,
	"../../example/pages/index.html":         ExamplePagesIndexHtml,
	"../../example/posts/first-post.md":      ExamplePostsFirstPostMd,
	"../../example/posts/fourth-post.md":     ExamplePostsFourthPostMd,
	"../../example/posts/second-post.md":     ExamplePostsSecondPostMd,
	"../../example/posts/third-post.md":      ExamplePostsThirdPostMd,
	"../../example/public/favicon.ico":       ExamplePublicFaviconIco,
	"../../example/public/styles.css":        ExamplePublicStylesCss,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"..": &bintree{nil, map[string]*bintree{
		"..": &bintree{nil, map[string]*bintree{
			"example": &bintree{nil, map[string]*bintree{
				"config.toml": &bintree{ExampleConfigToml, map[string]*bintree{}},
				"includes": &bintree{nil, map[string]*bintree{
					"base.html":       &bintree{ExampleIncludesBaseHtml, map[string]*bintree{}},
					"page.html":       &bintree{ExampleIncludesPageHtml, map[string]*bintree{}},
					"pagination.html": &bintree{ExampleIncludesPaginationHtml, map[string]*bintree{}},
					"post.html":       &bintree{ExampleIncludesPostHtml, map[string]*bintree{}},
				}},
				"pages": &bintree{nil, map[string]*bintree{
					"404.html":   &bintree{ExamplePages404Html, map[string]*bintree{}},
					"about.md":   &bintree{ExamplePagesAboutMd, map[string]*bintree{}},
					"index.html": &bintree{ExamplePagesIndexHtml, map[string]*bintree{}},
				}},
				"posts": &bintree{nil, map[string]*bintree{
					"first-post.md":  &bintree{ExamplePostsFirstPostMd, map[string]*bintree{}},
					"fourth-post.md": &bintree{ExamplePostsFourthPostMd, map[string]*bintree{}},
					"second-post.md": &bintree{ExamplePostsSecondPostMd, map[string]*bintree{}},
					"third-post.md":  &bintree{ExamplePostsThirdPostMd, map[string]*bintree{}},
				}},
				"public": &bintree{nil, map[string]*bintree{
					"favicon.ico": &bintree{ExamplePublicFaviconIco, map[string]*bintree{}},
					"styles.css":  &bintree{ExamplePublicStylesCss, map[string]*bintree{}},
				}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
